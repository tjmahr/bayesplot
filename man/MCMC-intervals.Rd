% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mcmc-intervals.R
\name{MCMC-intervals}
\alias{MCMC-intervals}
\alias{mcmc_intervals}
\alias{mcmc_areas}
\alias{mcmc_joy}
\title{Plot interval estimates from MCMC draws}
\usage{
mcmc_intervals(x, pars = character(), regex_pars = character(),
  transformations = list(), ..., prob = 0.5, prob_outer = 0.9,
  point_est = c("median", "mean", "none"), rhat = numeric())

mcmc_areas(x, pars = character(), regex_pars = character(),
  transformations = list(), ..., prob = 0.5, prob_outer = 1,
  point_est = c("median", "mean", "none"), rhat = numeric(), bw = NULL,
  adjust = NULL, kernel = NULL)

mcmc_joy(x, pars = character(), regex_pars = character(),
  transformations = list(), ..., prob = 0.8, prob_outer = 1,
  bw = "nrd0", adjust = 1, kernel = "gaussian", height_scalar = 1.5,
  order_pars = TRUE)
}
\arguments{
\item{x}{A 3-D array, matrix, list of matrices, or data frame of MCMC draws.
The \link{MCMC-overview} page provides details on how to specify each these
allowed inputs.}

\item{pars}{An optional character vector of parameter names. If neither
\code{pars} nor \code{regex_pars} is specified then the default is to use
\emph{all} parameters.}

\item{regex_pars}{An optional \link[=grep]{regular expression} to use for
parameter selection. Can be specified instead of \code{pars} or in addition
to \code{pars}.}

\item{transformations}{Optionally, transformations to apply to parameters
before plotting. If \code{transformations} is a function or a single string
naming a function then that function will be used to transform all
parameters. To apply transformations to particular parameters, the
\code{transformations} argument can be a named list with length equal to
the number of parameters to be transformed. Currently only univariate
transformations of scalar parameters can be specified (multivariate
transformations will be implemented in a future release). If
\code{transformations} is a list, the name of each list element should be a
parameter name and the content of each list element should be a function
(or any item to match as a function via \code{\link{match.fun}}, e.g. a
string naming a function). If a function is specified by its name as a
string (e.g. \code{"log"}), then it can be used to construct a new
parameter label for the appropriate parameter (e.g. \code{"log(sigma)"}).
If a function itself is specified (e.g. \code{log} or \code{function(x)
log(x)}) then \code{"t"} is used in the new parameter label to indicate
that the parameter is transformed (e.g. \code{"t(sigma)"}).}

\item{...}{Currently unused.}

\item{prob}{The probability mass to include in the inner interval (for
\code{mcmc_intervals}) or in the shaded region (for \code{mcmc_areas},
\code{mcmc_joy}). The default is \code{0.5} for \code{mcmc_intervals} and
\code{mcmc_areas} and \code{0.8} for \code{mcmc_joy}.}

\item{prob_outer}{The probability mass to include in the outer interval. The
default is \code{0.9} for \code{mcmc_intervals}
and \code{1} for \code{mcmc_areas} and \code{mcmc_joy}.}

\item{point_est}{The point estimate to show. Either \code{"median"} (the
default), \code{"mean"}, or \code{"none"}.}

\item{rhat}{An optional numeric vector of \eqn{\hat{R}}{Rhat} estimates, with
one element per parameter included in \code{x}. If \code{rhat} is provided,
the intervals/areas and point estimates in the resulting plot are colored
based on \eqn{\hat{R}}{Rhat} value. See \code{\link{rhat}} for methods for
extracting \eqn{\hat{R}}{Rhat} estimates.}

\item{bw, adjust, kernel}{For \code{mcmc_areas} and \code{mcmc_joy}, optional
arguments passed to \code{\link[stats]{density}} to override default kernel
density estimation parameters.}

\item{height_scalar}{For \code{mcmc_joy}, a multiplicative factor used
to increase or decrease the heights of the density plots.}

\item{order_pars}{For \code{mcmc_joy}, by default the parameters are plotted
in order of their median value. To override this default and plot them in
the order provided in \code{x} set \code{order_pars} to \code{FALSE}.}
}
\value{
A ggplot object that can be further customized using the
  \pkg{ggplot2} package.
}
\description{
Plot central (quantile-based) interval estimates from MCMC draws. See the
\strong{Plot Descriptions} section, below, for details.
}
\section{Plot Descriptions}{

\describe{
  \item{\code{mcmc_intervals}}{
   Plots of uncertainty intervals computed from posterior draws with all
   chains merged.
  }
  \item{\code{mcmc_areas}}{
   Density plots computed from posterior draws with all chains merged,
   with uncertainty intervals shown as shaded areas under the curves.
  }
  \item{\code{mcmc_joy}}{
   Similar to \code{mcmc_areas} but the density plots are staggered and
   ordered by posterior median. (See the \pkg{ggjoy} package for more
   details.) The implementation of \code{mcmc_joy} in \pkg{bayesplot}
   was inspired by a blog post by TJ Mahr
   (\url{http://rpubs.com/tjmahr/joyplot}).
  }
}
}

\examples{
# some parameter draws to use for demonstration
x <- example_mcmc_draws(params = 6)
dim(x)
dimnames(x)

color_scheme_set("brightblue")
mcmc_intervals(x)
mcmc_intervals(x, pars = c("beta[1]", "beta[2]"))
mcmc_areas(x, regex_pars = "beta\\\\[[1-3]", prob = 0.8) +
 ggplot2::labs(
   title = "Posterior distributions",
   subtitle = "with medians and 80\% intervals"
 )

color_scheme_set("red")
mcmc_areas(
   x,
   pars = c("alpha", "beta[4]"),
   prob = 2/3,
   prob_outer = 0.9,
   point_est = "mean"
)

# color by rhat value
color_scheme_set("blue")
fake_rhat_values <- c(1, 1.07, 1.3, 1.01, 1.15, 1.005)
mcmc_intervals(x, rhat = fake_rhat_values)

color_scheme_set("gray")
p <- mcmc_areas(x, pars = c("alpha", "beta[4]"), rhat = c(1, 1.1))
p + legend_move("bottom")
p + legend_move("none") # or p + legend_none()

\donttest{
# apply transformations
mcmc_intervals(
  x,
  pars = c("beta[2]", "sigma"),
  transformations = list("sigma" = "log", "beta[2]" = function(x) x + 3)
)

# apply same transformation to all selected parameters
mcmc_intervals(x, regex_pars = "beta", transformations = "exp")
}

\dontrun{
# example using fitted model from rstanarm package
library(rstanarm)
fit <- stan_glm(
 mpg ~ 0 + wt + factor(cyl),
 data = mtcars,
 iter = 500
)
x <- as.matrix(fit)

color_scheme_set("teal")
mcmc_intervals(x, point_est = "mean", prob = 0.8, prob_outer = 0.95)
mcmc_areas(x, regex_pars = "cyl", bw = "SJ",
           rhat = rhat(fit, regex_pars = "cyl"))
}


}
\seealso{
Other MCMC: \code{\link{MCMC-combos}},
  \code{\link{MCMC-diagnostics}},
  \code{\link{MCMC-distributions}},
  \code{\link{MCMC-nuts}}, \code{\link{MCMC-overview}},
  \code{\link{MCMC-recover}},
  \code{\link{MCMC-scatterplots}},
  \code{\link{MCMC-traces}}
}
